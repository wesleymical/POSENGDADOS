-- Dropar a tabela STAGING se existir
IF OBJECT_ID('dbo.STAGING_CANDIDATO', 'U') IS NOT NULL
    DROP TABLE dbo.STAGING_CANDIDATO;

-- Criação da tabela STAGING com todas as colunas do arquivo CSV
CREATE TABLE STAGING_CANDIDATO (
    DT_GERACAO VARCHAR(255),
    HH_GERACAO VARCHAR(255),
    ANO_ELEICAO VARCHAR(255),
    CD_TIPO_ELEICAO VARCHAR(255),
    NM_TIPO_ELEICAO VARCHAR(255),
    NR_TURNO VARCHAR(255),
    CD_ELEICAO VARCHAR(255),
    DS_ELEICAO VARCHAR(255),
    DT_ELEICAO VARCHAR(255),
    TP_ABRANGENCIA VARCHAR(255),
    SG_UF VARCHAR(255),
    SG_UE VARCHAR(255),
    NM_UE VARCHAR(255),
    CD_CARGO VARCHAR(255),
    DS_CARGO VARCHAR(255),
    SQ_CANDIDATO VARCHAR(255),
    NR_CANDIDATO VARCHAR(255),
    NM_CANDIDATO VARCHAR(255),
    NM_URNA_CANDIDATO VARCHAR(255),
    NM_SOCIAL_CANDIDATO VARCHAR(255),
    NR_CPF_CANDIDATO VARCHAR(255),
    DS_EMAIL VARCHAR(255),
    CD_SITUACAO_CANDIDATURA VARCHAR(255),
    DS_SITUACAO_CANDIDATURA VARCHAR(255), 
    TP_AGREMIACAO VARCHAR(255),
    NR_PARTIDO VARCHAR(255),
    SG_PARTIDO VARCHAR(255),
    NM_PARTIDO VARCHAR(255),
    NR_FEDERACAO VARCHAR(255),
    NM_FEDERACAO VARCHAR(255),
    SG_FEDERACAO VARCHAR(255),
    DS_COMPOSICAO_FEDERACAO VARCHAR(255),
    SQ_COLIGACAO VARCHAR(255),
    NM_COLIGACAO VARCHAR(255),
    DS_COMPOSICAO_COLIGACAO VARCHAR(255),
    SG_UF_NASCIMENTO VARCHAR(255),
    DT_NASCIMENTO VARCHAR(255),
    NR_TITULO_ELEITORAL_CANDIDATO VARCHAR(255),
    CD_GENERO VARCHAR(255),
    DS_GENERO VARCHAR(255),
    CD_GRAU_INSTRUCAO VARCHAR(255),
    DS_GRAU_INSTRUCAO VARCHAR(255),
    CD_ESTADO_CIVIL VARCHAR(255),
    DS_ESTADO_CIVIL VARCHAR(255),
    CD_COR_RACA VARCHAR(255),
    DS_COR_RACA VARCHAR(255),
    CD_OCUPACAO VARCHAR(255),
    DS_OCUPACAO VARCHAR(255),
    CD_SIT_TOT_TURNO VARCHAR(255),
    DS_SIT_TOT_TURNO VARCHAR(255)
);

-- Definir variável para o caminho do arquivo CSV
DECLARE @FilePath NVARCHAR(255);
SET @FilePath = N'D:\mical\Documents\POS ENGENHARIA DE DADOS\POSENGDADOS\REPOSITORIO\SQL_ENGINES\consulta_cand_2024\consulta_cand_2024_CE.csv';

-- Comando dinâmico para importar dados do CSV para a tabela de staging
DECLARE @SQL NVARCHAR(MAX);
SET @SQL = N'
BULK INSERT STAGING_CANDIDATO
FROM ''' + @FilePath + '''
WITH (
    FIELDTERMINATOR = '';'',
    ROWTERMINATOR = ''\n'',
    FIRSTROW = 2,
    CODEPAGE = ''1252'' -- Utilizar a página de código 1252 para Latin-1
);
';

-- Executar o comando dinâmico
EXEC sp_executesql @SQL;

-- Remover aspas das colunas de texto na tabela de staging
UPDATE STAGING_CANDIDATO
SET 
    DT_GERACAO = REPLACE(DT_GERACAO, '"', ''),
    HH_GERACAO = REPLACE(HH_GERACAO, '"', ''),
    ANO_ELEICAO = REPLACE(ANO_ELEICAO, '"', ''),
    CD_TIPO_ELEICAO = REPLACE(CD_TIPO_ELEICAO, '"', ''),
    NM_TIPO_ELEICAO = REPLACE(NM_TIPO_ELEICAO, '"', ''),
    NR_TURNO = REPLACE(NR_TURNO, '"', ''),
    CD_ELEICAO = REPLACE(CD_ELEICAO, '"', ''),
    DS_ELEICAO = REPLACE(DS_ELEICAO, '"', ''),
    DT_ELEICAO = REPLACE(DT_ELEICAO, '"', ''),
    TP_ABRANGENCIA = REPLACE(TP_ABRANGENCIA, '"', ''),
    SG_UF = REPLACE(SG_UF, '"', ''),
    SG_UE = REPLACE(SG_UE, '"', ''),
    NM_UE = REPLACE(NM_UE, '"', ''),
    CD_CARGO = REPLACE(CD_CARGO, '"', ''),
    DS_CARGO = REPLACE(DS_CARGO, '"', ''),
    SQ_CANDIDATO = REPLACE(SQ_CANDIDATO, '"', ''),
    NR_CANDIDATO = REPLACE(NR_CANDIDATO, '"', ''),
    NM_CANDIDATO = REPLACE(NM_CANDIDATO, '"', ''),
    NM_URNA_CANDIDATO = REPLACE(NM_URNA_CANDIDATO, '"', ''),
    NM_SOCIAL_CANDIDATO = REPLACE(NM_SOCIAL_CANDIDATO, '"', ''),
    NR_CPF_CANDIDATO = REPLACE(NR_CPF_CANDIDATO, '"', ''),
    DS_EMAIL = REPLACE(DS_EMAIL, '"', ''),
    CD_SITUACAO_CANDIDATURA = REPLACE(CD_SITUACAO_CANDIDATURA, '"', ''),
    DS_SITUACAO_CANDIDATURA = REPLACE(DS_SITUACAO_CANDIDATURA, '"', ''),
    TP_AGREMIACAO = REPLACE(TP_AGREMIACAO, '"', ''),
    NR_PARTIDO = REPLACE(NR_PARTIDO, '"', ''),
    SG_PARTIDO = REPLACE(SG_PARTIDO, '"', ''),
    NM_PARTIDO = REPLACE(NM_PARTIDO, '"', ''),
    NR_FEDERACAO = REPLACE(NR_FEDERACAO, '"', ''),
    NM_FEDERACAO = REPLACE(NM_FEDERACAO, '"', ''),
    SG_FEDERACAO = REPLACE(SG_FEDERACAO, '"', ''),
    DS_COMPOSICAO_FEDERACAO = REPLACE(DS_COMPOSICAO_FEDERACAO, '"', ''),
    SQ_COLIGACAO = REPLACE(SQ_COLIGACAO, '"', ''),
    NM_COLIGACAO = REPLACE(NM_COLIGACAO, '"', ''),
    DS_COMPOSICAO_COLIGACAO = REPLACE(DS_COMPOSICAO_COLIGACAO, '"', ''),
    SG_UF_NASCIMENTO = REPLACE(SG_UF_NASCIMENTO, '"', ''),
    DT_NASCIMENTO = REPLACE(DT_NASCIMENTO, '"', ''),
    NR_TITULO_ELEITORAL_CANDIDATO = REPLACE(NR_TITULO_ELEITORAL_CANDIDATO, '"', ''),
    CD_GENERO = REPLACE(CD_GENERO, '"', ''),
    DS_GENERO = REPLACE(DS_GENERO, '"', ''),
    CD_GRAU_INSTRUCAO = REPLACE(CD_GRAU_INSTRUCAO, '"', ''),
    DS_GRAU_INSTRUCAO = REPLACE(DS_GRAU_INSTRUCAO, '"', ''),
    CD_ESTADO_CIVIL = REPLACE(CD_ESTADO_CIVIL, '"', ''),
    DS_ESTADO_CIVIL = REPLACE(DS_ESTADO_CIVIL, '"', ''),
    CD_COR_RACA = REPLACE(CD_COR_RACA, '"', ''),
    DS_COR_RACA = REPLACE(DS_COR_RACA, '"', ''),
    CD_OCUPACAO = REPLACE(CD_OCUPACAO, '"', ''),
    DS_OCUPACAO = REPLACE(DS_OCUPACAO, '"', ''),
    CD_SIT_TOT_TURNO = REPLACE(CD_SIT_TOT_TURNO, '"', ''),
    DS_SIT_TOT_TURNO = REPLACE(DS_SIT_TOT_TURNO, '"', '');

--- Inserir dados tratados na tabela AJUSTADO
INSERT INTO AJUSTADO (
    DT_GERACAO, HH_GERACAO, ANO_ELEICAO, CD_TIPO_ELEICAO, NM_TIPO_ELEICAO, NR_TURNO, CD_ELEICAO, DS_ELEICAO, DT_ELEICAO, TP_ABRANGENCIA, SG_UF, SG_UE, NM_UE, CD_CARGO, DS_CARGO, SQ_CANDIDATO, NR_CANDIDATO, NM_CANDIDATO, NM_URNA_CANDIDATO, NM_SOCIAL_CANDIDATO, NR_CPF_CANDIDATO, DS_EMAIL, CD_SITUACAO_CANDIDATURA, DS_SITUACAO_CANDIDATURA, TP_AGREMIACAO, NR_PARTIDO, SG_PARTIDO, NM_PARTIDO, NR_FEDERACAO, NM_FEDERACAO, SG_FEDERACAO, DS_COMPOSICAO_FEDERACAO, SQ_COLIGACAO, NM_COLIGACAO, DS_COMPOSICAO_COLIGACAO, SG_UF_NASCIMENTO, DT_NASCIMENTO, NR_TITULO_ELEITORAL_CANDIDATO, CD_GENERO, DS_GENERO, CD_GRAU_INSTRUCAO, DS_GRAU_INSTRUCAO, CD_ESTADO_CIVIL, DS_ESTADO_CIVIL, CD_COR_RACA, DS_COR_RACA, CD_OCUPACAO, DS_OCUPACAO, CD_SIT_TOT_TURNO, DS_SIT_TOT_TURNO
)
SELECT
    TRY_CONVERT(DATE, TRIM(DT_GERACAO), 120),
    TRY_CONVERT(TIME, TRIM(HH_GERACAO), 120),
    TRY_CONVERT(INT, TRIM(ANO_ELEICAO)),
    TRY_CONVERT(INT, TRIM(CD_TIPO_ELEICAO)),
    TRIM(NM_TIPO_ELEICAO),
    TRY_CONVERT(INT, TRIM(NR_TURNO)),
    TRY_CONVERT(INT, TRIM(CD_ELEICAO)),
    TRIM(DS_ELEICAO),
    TRY_CONVERT(DATE, TRIM(DT_ELEICAO), 120),
    TRIM(TP_ABRANGENCIA),
    TRIM(SG_UF),
    TRIM(SG_UE),
    TRIM(NM_UE),
    TRY_CONVERT(INT, TRIM(CD_CARGO)),
    TRIM(DS_CARGO),
    TRY_CONVERT(BIGINT, TRIM(SQ_CANDIDATO)),
    TRY_CONVERT(INT, TRIM(NR_CANDIDATO)),
    TRIM(NM_CANDIDATO),
    TRIM(NM_URNA_CANDIDATO),
    TRIM(NM_SOCIAL_CANDIDATO),
    TRIM(NR_CPF_CANDIDATO),
    TRIM(DS_EMAIL),
    TRY_CONVERT(INT, TRIM(CD_SITUACAO_CANDIDATURA)),
    TRIM(DS_SITUACAO_CANDIDATURA),
    TRIM(TP_AGREMIACAO),
    TRY_CONVERT(INT, TRIM(NR_PARTIDO)),
    TRIM(SG_PARTIDO),
    TRIM(NM_PARTIDO),
    TRY_CONVERT(INT, TRIM(NR_FEDERACAO)),
    TRIM(NM_FEDERACAO),
    TRIM(SG_FEDERACAO),
    TRIM(DS_COMPOSICAO_FEDERACAO),
    TRY_CONVERT(BIGINT, TRIM(SQ_COLIGACAO)),
    TRIM(NM_COLIGACAO),
    TRIM(DS_COMPOSICAO_COLIGACAO),
    TRIM(SG_UF_NASCIMENTO),
    TRY_CONVERT(DATE, TRIM(DT_NASCIMENTO), 120),
    TRIM(NR_TITULO_ELEITORAL_CANDIDATO),
    TRY_CONVERT(INT, TRIM(CD_GENERO)),
    TRIM(DS_GENERO),
    TRY_CONVERT(INT, TRIM(CD_GRAU_INSTRUCAO)),
    TRIM(DS_GRAU_INSTRUCAO),
    TRY_CONVERT(INT, TRIM(CD_ESTADO_CIVIL)),
    TRIM(DS_ESTADO_CIVIL),
    TRY_CONVERT(INT, TRIM(CD_COR_RACA)),
    TRIM(DS_COR_RACA),
    TRY_CONVERT(INT, TRIM(CD_OCUPACAO)),
    TRIM(DS_OCUPACAO),
    TRY_CONVERT(INT, TRIM(CD_SIT_TOT_TURNO)),
    TRIM(DS_SIT_TOT_TURNO)
FROM STAGING_CANDIDATO;

-- Inserir dados na tabela UF
MERGE INTO UF AS target
USING (
    SELECT DISTINCT SG_UF, NM_UE
    FROM AJUSTADO
    WHERE SG_UF IS NOT NULL
) AS source (SG_UF, NM_UE)
ON (target.SG_UF = source.SG_UF AND target.NM_UE = source.NM_UE)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (SG_UF, NM_UE)
    VALUES (source.SG_UF, source.NM_UE);

-- Inserir dados na tabela CARGO
MERGE INTO CARGO AS target
USING (
    SELECT DISTINCT CD_CARGO, DS_CARGO
    FROM AJUSTADO
    WHERE CD_CARGO IS NOT NULL
) AS source (CD_CARGO, DS_CARGO)
ON (target.CD_CARGO = source.CD_CARGO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_CARGO, DS_CARGO)
    VALUES (source.CD_CARGO, source.DS_CARGO);

-- Inserir dados na tabela PARTIDO
MERGE INTO PARTIDO AS target
USING (
    SELECT DISTINCT NR_PARTIDO, SG_PARTIDO, NM_PARTIDO
    FROM AJUSTADO
    WHERE NR_PARTIDO IS NOT NULL
) AS source (NR_PARTIDO, SG_PARTIDO, NM_PARTIDO)
ON (target.NR_PARTIDO = source.NR_PARTIDO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (NR_PARTIDO, SG_PARTIDO, NM_PARTIDO)
    VALUES (source.NR_PARTIDO, source.SG_PARTIDO, source.NM_PARTIDO);

-- Inserir dados na tabela GRAU_INSTRUCAO
MERGE INTO GRAU_INSTRUCAO AS target
USING (
    SELECT DISTINCT CD_GRAU_INSTRUCAO, DS_GRAU_INSTRUCAO
    FROM AJUSTADO
    WHERE CD_GRAU_INSTRUCAO IS NOT NULL
) AS source (CD_GRAU_INSTRUCAO, DS_GRAU_INSTRUCAO)
ON (target.CD_GRAU_INSTRUCAO = source.CD_GRAU_INSTRUCAO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_GRAU_INSTRUCAO, DS_GRAU_INSTRUCAO)
    VALUES (source.CD_GRAU_INSTRUCAO, source.DS_GRAU_INSTRUCAO);

-- Inserir dados na tabela OCUPACAO
MERGE INTO OCUPACAO AS target
USING (
    SELECT DISTINCT CD_OCUPACAO, DS_OCUPACAO
    FROM AJUSTADO
    WHERE CD_OCUPACAO IS NOT NULL
) AS source (CD_OCUPACAO, DS_OCUPACAO)
ON (target.CD_OCUPACAO = source.CD_OCUPACAO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_OCUPACAO, DS_OCUPACAO)
    VALUES (source.CD_OCUPACAO, source.DS_OCUPACAO);

-- Inserir dados na tabela SITUACAO_CANDIDATURA
MERGE INTO SITUACAO_CANDIDATURA AS target
USING (
    SELECT DISTINCT CD_SITUACAO_CANDIDATURA, DS_SITUACAO_CANDIDATURA
    FROM AJUSTADO
    WHERE CD_SITUACAO_CANDIDATURA IS NOT NULL
) AS source (CD_SITUACAO_CANDIDATURA, DS_SITUACAO_CANDIDATURA)
ON (target.CD_SITUACAO_CANDIDATURA = source.CD_SITUACAO_CANDIDATURA)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_SITUACAO_CANDIDATURA, DS_SITUACAO_CANDIDATURA)
    VALUES (source.CD_SITUACAO_CANDIDATURA, source.DS_SITUACAO_CANDIDATURA);

-- Inserir dados na tabela CANDIDATO
MERGE INTO CANDIDATO AS target
USING (
    SELECT DISTINCT
        SQ_CANDIDATO,
        NR_CANDIDATO,
        NM_CANDIDATO,
        NM_URNA_CANDIDATO,
        NM_SOCIAL_CANDIDATO,
        NR_CPF_CANDIDATO,
        DS_EMAIL,
        SG_UF_NASCIMENTO,
        CONVERT(DATE, DT_NASCIMENTO, 120) AS DT_NASCIMENTO,
        NR_TITULO_ELEITORAL_CANDIDATO,
        CD_GENERO,
        CD_GRAU_INSTRUCAO,
        CD_ESTADO_CIVIL,
        CD_COR_RACA,
        CD_OCUPACAO,
        CD_SITUACAO_CANDIDATURA,
        NR_PARTIDO,
        NR_FEDERACAO
    FROM AJUSTADO
    WHERE SQ_CANDIDATO IS NOT NULL
) AS source (
    SQ_CANDIDATO, NR_CANDIDATO, NM_CANDIDATO, NM_URNA_CANDIDATO, NM_SOCIAL_CANDIDATO, NR_CPF_CANDIDATO, DS_EMAIL, SG_UF_NASCIMENTO, DT_NASCIMENTO,
    NR_TITULO_ELEITORAL_CANDIDATO, CD_GENERO, CD_GRAU_INSTRUCAO, CD_ESTADO_CIVIL, CD_COR_RACA, CD_OCUPACAO, CD_SITUACAO_CANDIDATURA, NR_PARTIDO, NR_FEDERACAO
)
ON (target.SQ_CANDIDATO = source.SQ_CANDIDATO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (
        SQ_CANDIDATO, NR_CANDIDATO, NM_CANDIDATO, NM_URNA_CANDIDATO, NM_SOCIAL_CANDIDATO, NR_CPF_CANDIDATO, DS_EMAIL, SG_UF_NASCIMENTO, DT_NASCIMENTO,
        NR_TITULO_ELEITORAL_CANDIDATO, CD_GENERO, CD_GRAU_INSTRUCAO, CD_ESTADO_CIVIL, CD_COR_RACA, CD_OCUPACAO, CD_SITUACAO_CANDIDATURA, NR_PARTIDO, NR_FEDERACAO
    )
    VALUES (
        source.SQ_CANDIDATO, source.NR_CANDIDATO, source.NM_CANDIDATO, source.NM_URNA_CANDIDATO, source.NM_SOCIAL_CANDIDATO, source.NR_CPF_CANDIDATO, source.DS_EMAIL,
        source.SG_UF_NASCIMENTO, source.DT_NASCIMENTO, source.NR_TITULO_ELEITORAL_CANDIDATO, source.CD_GENERO, source.CD_GRAU_INSTRUCAO, source.CD_ESTADO_CIVIL, source.CD_COR_RACA,
        source.CD_OCUPACAO, source.CD_SITUACAO_CANDIDATURA, source.NR_PARTIDO, source.NR_FEDERACAO
    );

-- Inserir dados na tabela ELEICAO
MERGE INTO ELEICAO AS target
USING (
    SELECT DISTINCT
        CONVERT(INT, CD_ELEICAO) AS CD_ELEICAO,
        CONVERT(INT, ANO_ELEICAO) AS ANO_ELEICAO,
        DS_ELEICAO,
        CONVERT(DATE, DT_ELEICAO, 120) AS DT_ELEICAO,
        NM_TIPO_ELEICAO,
        CONVERT(INT, NR_TURNO) AS NR_TURNO,
        TP_ABRANGENCIA,
        CONVERT(INT, CD_TIPO_ELEICAO) AS CD_TIPO_ELEICAO
    FROM AJUSTADO
    WHERE CD_ELEICAO IS NOT NULL
) AS source (
    CD_ELEICAO, ANO_ELEICAO, DS_ELEICAO, DT_ELEICAO, NM_TIPO_ELEICAO, NR_TURNO, TP_ABRANGENCIA, CD_TIPO_ELEICAO
)
ON (target.CD_ELEICAO = source.CD_ELEICAO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (
        CD_ELEICAO, ANO_ELEICAO, DS_ELEICAO, DT_ELEICAO, NM_TIPO_ELEICAO, NR_TURNO, TP_ABRANGENCIA, CD_TIPO_ELEICAO
    )
    VALUES (
        source.CD_ELEICAO, source.ANO_ELEICAO, source.DS_ELEICAO, source.DT_ELEICAO, source.NM_TIPO_ELEICAO, source.NR_TURNO, source.TP_ABRANGENCIA, source.CD_TIPO_ELEICAO
    );