-- Dropar a tabela STAGING se existir
IF OBJECT_ID('dbo.STAGING_BEM_CANDIDATO', 'U') IS NOT NULL
DROP TABLE dbo.STAGING_BEM_CANDIDATO;

-- Criação da tabela STAGING com as colunas do cabeçalho fornecido
CREATE TABLE STAGING_BEM_CANDIDATO (
    DT_GERACAO VARCHAR(255),
    HH_GERACAO VARCHAR(255),
    ANO_ELEICAO VARCHAR(255),
    CD_TIPO_ELEICAO VARCHAR(255),
    NM_TIPO_ELEICAO VARCHAR(255),
    CD_ELEICAO VARCHAR(255),
    DS_ELEICAO VARCHAR(255),
    DT_ELEICAO VARCHAR(255),
    SG_UF VARCHAR(255),
    SG_UE VARCHAR(255),
    NM_UE VARCHAR(255),
    SQ_CANDIDATO VARCHAR(255),
    NR_ORDEM_BEM_CANDIDATO VARCHAR(255),
    CD_TIPO_BEM_CANDIDATO VARCHAR(255),
    DS_TIPO_BEM_CANDIDATO VARCHAR(255),
    DS_BEM_CANDIDATO VARCHAR(255),
    VR_BEM_CANDIDATO VARCHAR(255),
    DT_ULT_ATUAL_BEM_CANDIDATO VARCHAR(255),
    HH_ULT_ATUAL_BEM_CANDIDATO VARCHAR(255)
);

-- Definir variável para o caminho do arquivo CSV
DECLARE @FilePath NVARCHAR(255);
SET @FilePath = N'D:\mical\Documents\POS ENGENHARIA DE DADOS\POSENGDADOS\REPOSITORIO\SQL_ENGINES\bem_candidato_2024\bem_candidato_2024_AC.csv';

-- Comando dinâmico para importar dados do CSV para a tabela de staging
DECLARE @SQL NVARCHAR(MAX);
SET @SQL = N'
BULK INSERT STAGING_BEM_CANDIDATO
FROM ''' + @FilePath + '''
WITH (
    FIELDTERMINATOR = '';'',
    ROWTERMINATOR = ''\n'',
    FIRSTROW = 2,
    CODEPAGE = ''1252'' -- Utilizar a página de código 1252 para Latin-1
);
';

-- Executar o comando dinâmico
EXEC sp_executesql @SQL;

-- Remover aspas das colunas de texto na tabela de staging
UPDATE STAGING_BEM_CANDIDATO
SET 
    DT_GERACAO = REPLACE(DT_GERACAO, '"', ''),
    HH_GERACAO = REPLACE(HH_GERACAO, '"', ''),
    ANO_ELEICAO = REPLACE(ANO_ELEICAO, '"', ''),
    CD_TIPO_ELEICAO = REPLACE(CD_TIPO_ELEICAO, '"', ''),
    NM_TIPO_ELEICAO = REPLACE(NM_TIPO_ELEICAO, '"', ''),
    CD_ELEICAO = REPLACE(CD_ELEICAO, '"', ''),
    DS_ELEICAO = REPLACE(DS_ELEICAO, '"', ''),
    DT_ELEICAO = REPLACE(DT_ELEICAO, '"', ''),
    SG_UF = REPLACE(SG_UF, '"', ''),
    SG_UE = REPLACE(SG_UE, '"', ''),
    NM_UE = REPLACE(NM_UE, '"', ''),
    SQ_CANDIDATO = REPLACE(SQ_CANDIDATO, '"', ''),
    NR_ORDEM_BEM_CANDIDATO = REPLACE(NR_ORDEM_BEM_CANDIDATO, '"', ''),
    CD_TIPO_BEM_CANDIDATO = REPLACE(CD_TIPO_BEM_CANDIDATO, '"', ''),
    DS_TIPO_BEM_CANDIDATO = REPLACE(DS_TIPO_BEM_CANDIDATO, '"', ''),
    DS_BEM_CANDIDATO = REPLACE(DS_BEM_CANDIDATO, '"', ''),
    VR_BEM_CANDIDATO = REPLACE(VR_BEM_CANDIDATO, '"', ''),
    DT_ULT_ATUAL_BEM_CANDIDATO = REPLACE(DT_ULT_ATUAL_BEM_CANDIDATO, '"', ''),
    HH_ULT_ATUAL_BEM_CANDIDATO = REPLACE(HH_ULT_ATUAL_BEM_CANDIDATO, '"', '');

-- Inserir dados tratados na tabela AJUSTADO
INSERT INTO AJUSTADO (
    DT_GERACAO, HH_GERACAO, ANO_ELEICAO, CD_TIPO_ELEICAO, NM_TIPO_ELEICAO, CD_ELEICAO, DS_ELEICAO, DT_ELEICAO, SG_UF, SG_UE, NM_UE, SQ_CANDIDATO, NR_ORDEM_BEM_CANDIDATO, CD_TIPO_BEM_CANDIDATO, DS_TIPO_BEM_CANDIDATO, DS_BEM_CANDIDATO, VR_BEM_CANDIDATO, DT_ULT_ATUAL_BEM_CANDIDATO, HH_ULT_ATUAL_BEM_CANDIDATO
)
SELECT
    TRY_CONVERT(DATE, TRIM(DT_GERACAO), 103),
    TRY_CONVERT(TIME, TRIM(HH_GERACAO), 108),
    TRY_CONVERT(INT, TRIM(ANO_ELEICAO)),
    TRY_CONVERT(INT, TRIM(CD_TIPO_ELEICAO)),
    TRIM(NM_TIPO_ELEICAO),
    TRY_CONVERT(INT, TRIM(CD_ELEICAO)),
    TRIM(DS_ELEICAO),
    TRY_CONVERT(DATE, TRIM(DT_ELEICAO), 103),
    TRIM(SG_UF),
    TRIM(SG_UE),
    TRIM(NM_UE),
    TRY_CONVERT(BIGINT, TRIM(SQ_CANDIDATO)),
    TRY_CONVERT(INT, TRIM(NR_ORDEM_BEM_CANDIDATO)),
    TRY_CONVERT(INT, TRIM(CD_TIPO_BEM_CANDIDATO)),
    TRIM(DS_TIPO_BEM_CANDIDATO),
    TRIM(DS_BEM_CANDIDATO),
    TRY_CONVERT(DECIMAL(18, 2), TRIM(VR_BEM_CANDIDATO)),
    TRY_CONVERT(DATE, TRIM(DT_ULT_ATUAL_BEM_CANDIDATO), 103),
    TRY_CONVERT(TIME, TRIM(HH_ULT_ATUAL_BEM_CANDIDATO), 108)
FROM STAGING_BEM_CANDIDATO;

-- Inserir dados na tabela UF
MERGE INTO UF AS target
USING (
    SELECT DISTINCT SG_UF, NM_UE
    FROM AJUSTADO
    WHERE SG_UF IS NOT NULL
) AS source (SG_UF, NM_UE)
ON (target.SG_UF = source.SG_UF AND target.NM_UE = source.NM_UE)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (SG_UF, NM_UE)
    VALUES (source.SG_UF, source.NM_UE);

-- Inserir dados na tabela ELEICAO
MERGE INTO ELEICAO AS target
USING (
    SELECT DISTINCT
        CD_ELEICAO,
        ANO_ELEICAO,
        DS_ELEICAO,
        DT_ELEICAO,
        NM_TIPO_ELEICAO,
        CD_TIPO_ELEICAO
    FROM AJUSTADO
    WHERE CD_ELEICAO IS NOT NULL
) AS source (CD_ELEICAO, ANO_ELEICAO, DS_ELEICAO, DT_ELEICAO, NM_TIPO_ELEICAO, CD_TIPO_ELEICAO)
ON (target.CD_ELEICAO = source.CD_ELEICAO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_ELEICAO, ANO_ELEICAO, DS_ELEICAO, DT_ELEICAO, NM_TIPO_ELEICAO, CD_TIPO_ELEICAO)
    VALUES (source.CD_ELEICAO, source.ANO_ELEICAO, source.DS_ELEICAO, source.DT_ELEICAO, source.NM_TIPO_ELEICAO, source.CD_TIPO_ELEICAO);

-- Inserir dados na tabela TIPO_BEM
MERGE INTO TIPO_BEM AS target
USING (
    SELECT DISTINCT CD_TIPO_BEM_CANDIDATO, DS_TIPO_BEM_CANDIDATO
    FROM AJUSTADO
    WHERE CD_TIPO_BEM_CANDIDATO IS NOT NULL
) AS source (CD_TIPO_BEM_CANDIDATO, DS_TIPO_BEM_CANDIDATO)
ON (target.CD_TIPO_BEM_CANDIDATO = source.CD_TIPO_BEM_CANDIDATO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (CD_TIPO_BEM_CANDIDATO, DS_TIPO_BEM_CANDIDATO)
    VALUES (source.CD_TIPO_BEM_CANDIDATO, source.DS_TIPO_BEM_CANDIDATO);

-- Inserir dados na tabela BEM_CANDIDATO
MERGE INTO BEM_CANDIDATO AS target
USING (
    SELECT DISTINCT
        SQ_CANDIDATO,
        NR_ORDEM_BEM_CANDIDATO,
        CD_TIPO_BEM_CANDIDATO,
        DS_BEM_CANDIDATO,
        VR_BEM_CANDIDATO,
        DT_ULT_ATUAL_BEM_CANDIDATO,
        HH_ULT_ATUAL_BEM_CANDIDATO
    FROM AJUSTADO
    WHERE SQ_CANDIDATO IS NOT NULL AND NR_ORDEM_BEM_CANDIDATO IS NOT NULL
) AS source (
    SQ_CANDIDATO, NR_ORDEM_BEM_CANDIDATO, CD_TIPO_BEM_CANDIDATO, DS_BEM_CANDIDATO, VR_BEM_CANDIDATO, DT_ULT_ATUAL_BEM_CANDIDATO, HH_ULT_ATUAL_BEM_CANDIDATO
)
ON (target.SQ_CANDIDATO = source.SQ_CANDIDATO AND target.NR_ORDEM_BEM_CANDIDATO = source.NR_ORDEM_BEM_CANDIDATO)
WHEN NOT MATCHED BY TARGET THEN
    INSERT (SQ_CANDIDATO, NR_ORDEM_BEM_CANDIDATO, CD_TIPO_BEM_CANDIDATO, DS_BEM_CANDIDATO, VR_BEM_CANDIDATO, DT_ULT_ATUAL_BEM_CANDIDATO, HH_ULT_ATUAL_BEM_CANDIDATO)
    VALUES (source.SQ_CANDIDATO, source.NR_ORDEM_BEM_CANDIDATO, source.CD_TIPO_BEM_CANDIDATO, source.DS_BEM_CANDIDATO, source.VR_BEM_CANDIDATO, source.DT_ULT_ATUAL_BEM_CANDIDATO, source.HH_ULT_ATUAL_BEM_CANDIDATO);